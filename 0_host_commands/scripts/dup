#! /usr/bin/bash
# arg1 : target container_name,  arg2- (option) : argument for ros node launch
# Example :
# dup acs tokyu debug : run tokyu project in debug mode
# dup dev : simple up acsl-common:image_${PROJECT}${TARGET}
source $ACSL_ROS2_DIR/bashrc
OPT=""
if [[ "$1" =~ ^--image= ]]; then
  OPT=$(echo $1 | sed -e 's/^--image=//')
  shift
fi
compose=" -f ${ACSL_ROS2_DIR}/4_docker/docker-compose.yml "
local_compose=$(ls . | grep docker-compose_${1}.yml)
if [[ -n ${local_compose} ]]; then
  compose=${compose}" -f ${ACSL_WORK_DIR}/docker-compose_${1}.yml "
  echo ":::::::::::::::::::::::::::::"
  echo ${compose}
fi

#cd $ACSL_ROS2_DIR/4_docker
source $ACSL_ROS2_DIR/4_docker/common/scripts/super_echo
source $ACSL_ROS2_DIR/bashrc

gecho "DUP ${ROS_DOMAIN_ID}: $OPT : $1 : ${@:2:($# - 1)}"
if [ $# -ge 1 ]; then
  if [ $1 = "all" ]; then
    $ACSL_WORK_DIR/project_launch${TARGET}.sh
  else
    launch_args=${@:2:($# - 1)}
    #LARGS=$launch_args HOSTNAME=$(hostname | sed -e 's/-/_/g') docker compose --env-file envfiles/env.$1 up common -d
    TAG=$1
    echo "===== TAG: ${TAG%%_x86*}${x86} ===="
    cimage=${TAG%%_x86*}${x86} # image candidate
    exist_image=$(docker images kasekiguchi/acsl-common:${cimage} | grep ${cimage})
    echo "Search image: ${cimage}         Found: $exist_image "
    if [[ -z $exist_image ]]; then
      exist_image=$(docker images kasekiguchi/acsl-common | grep image_${PROJECT}${TARGET}${x86})
      if [[ -z $exist_image ]]; then
        TAG=base${x86}
      else
        TAG=image_${PROJECT}${TARGET}${x86}
      fi
      echo "== image ${cimage} does NOT exists. Use ${TAG} alternatively."
    else
      echo "== image ${cimage} exists"
      TAG=${cimage}
    fi
    ROS_LAUNCH=$(ls -v $ACSL_WORK_DIR/1_launcher/ | grep launch_$1 | fmt | awk '{print $NF}')

    CONTAINER_NAME=$1
    # if [[ ${OPT} == "" ]]; then
    #   CONTAINER_NAME=$1
    # else
    #   TAG=${OPT}
    # fi
    if [[ $1 == "dev" ]]; then
      cp $ACSL_ROS2_DIR/1_launcher/launch_dev.sh $ACSL_WORK_DIR/1_launcher/
      chmod a+x $ACSL_WORK_DIR/1_launcher/launch_dev.sh
      ROS_LAUNCH=launch_dev.sh
      CONTAINER_NAME=dev${TARGET}
    fi

    str=$(dps | grep -v Exited | awk '{print $NF}' | sed -e 's/NAMES//' | grep ^${1})
    echo $str
    if [[ -z $str ]]; then
      echo "TAG=$TAG CONTAINER_NAME=${CONTAINER_NAME} COMPOSE_PROJECT_NAME=${1,,}_${PROJECT,,}${TARGET,,} ROS_LAUNCH=$ROS_LAUNCH LARGS=$launch_args HOSTNAME=$(hostname | sed -e 's/-/_/g') docker compose ${compose} up common -d"
      TAG=${TAG} CONTAINER_NAME=${CONTAINER_NAME} COMPOSE_PROJECT_NAME=${1,,}_${PROJECT,,}${TARGET,,} ROS_LAUNCH=$ROS_LAUNCH LARGS=$launch_args HOSTNAME=$(hostname | sed -e 's/-/_/g') docker compose ${compose} up common -d
    else
      echo "COMPOSE_PROJECT_NAME=${CONTAINER_NAME,,}_${PROJECT,,}${TARGET,,} docker compose exec common /common/ros_launcher/$ROS_LAUNCH $launch_args"
      COMPOSE_PROJECT_NAME=${CONTAINER_NAME,,}_${PROJECT,,}${TARGET,,} docker compose exec common /common/ros_launcher/$ROS_LAUNCH $launch_args
      #exec common /common/scripts/Dcmd ${cmd[@]}
    fi
  fi
fi

# 記述の意味
# HOSTNAME=$(hostname | sed -e "s/-/_/g") : HOSTのhostnameをros2 nodeのnamespaceに追加
# Dockerを表すDという接頭辞を付けたhostnameがnamespaceになる。
# 例：
#  node名：fcu
#  hostname : rp5-2
# の場合　/Drp5_2/fcu　となる。　hostname内の 「-」 は「_」 に置換される
# docker 以降はdocker の普通の使い方なのでREADME_DOCKER参照
