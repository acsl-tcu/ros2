#! /usr/bin/bash

# #1 : project name
# #2- : build target packages
# [usage]
# build_project ros_packages
# build_project --image=image_name ros_packages

OPT=""
if [[ "$1" =~ ^--image= ]]; then
  OPT=$(echo $1 | sed -e 's/^--image=//')
  shift
fi

source $ACSL_ROS2_DIR/4_docker/common/scripts/super_echo
if [ $# -ge 1 ]; then
  #packs=${@:1:($# - 1)}
  packs=$@
else
  packs=$(my_packages)
fi

gecho "BUILD_PROJECT: build own ros packages"

fx86=$(uname -a | grep x86)
if [[ -n $fx86 ]]; then
  x86="_x86"
else
  x86=""
fi

cp ${ACSL_ROS2_DIR}/1_launcher/launch_build.sh ${ACSL_WORK_DIR}/1_launcher/
chmod a+x ${ACSL_WORK_DIR}/1_launcher/launch_build.sh
if [[ ${OPT} == "" ]]; then
  TAG=image_${PROJECT}${TARGET}${x86}
  exist_image=$(docker images kasekiguchi/acsl-common:${TAG} | grep ${TAG})
  if [[ -z $exist_image ]]; then
    recho "create ${TAG} image first by
  dsbuild"
  else
    dup build $packs
    # acsl-common:$TAG を build コンテナとしてcommon サービスで起動
    # 中で　launch_build.sh　を実行し自作パッケージをcolcon buildする

    dlogs build_${PROJECT}${TARGET}
    gecho "docker commit : from build_${PROJECT}${TARGET} container to image_${TAG} tagged image"
    dcommit build_${PROJECT}${TARGET} ${TAG}
    gecho "remove build_${PROJECT}${TARGET} container"
    drm build_${PROJECT}${TARGET}
  fi
else
  dup --image=${OPT} build $packs
  dlogs build_${PROJECT}${TARGET}
  gecho "docker commit : from build_${PROJECT}${TARGET} container to ${OPT} tagged image"
  dcommit build_${PROJECT}${TARGET} ${OPT}
  gecho "remove build_${PROJECT}${TARGET} container"
  drm build_${PROJECT}${TARGET}
fi
rm -f ${ACSL_WORK_DIR}/1_launcher/launch_build.sh
