# シェル判定関数
# Special thanks to https://qiita.com/ko1nksm/items/d0b066268cda42ff24eb
# customize https://zenn.dev/memo/articles/20211004_ps1
puts() {
  printf '' && return 0
  if print -nr -- ''; then
    [ "${ZSH_VERSION:-}" ] && return 1 || return 2
  fi
  if [ "${POSH_VERSION:-}" ]; then
    [ "${1#*\\}" ] && return 3 || return 4
  fi
  return 9
}
(
  PATH=""
  puts "\\"
) 2>/dev/null && :
case $? in
0) # printf がビルトインの場合
  puts() {
    IFS=" $IFS"
    printf '%s' "${*:-}"
    IFS=${IFS#?}
  }
  putsn() {
    IFS=" $IFS"
    printf '%s\n' "${*:-}"
    IFS=${IFS#?}
  }
  ;;
1) # 古 zsh 用
  puts() { builtin print -nr -- "${@:-}"; }
  putsn() { builtin print -r -- "${@:-}"; }
  ;;
2) # ksh88, mksh, OpenBSD ksh, pdksh 用
  puts() { command print -nr -- "${@:-}"; }
  putsn() { command print -r -- "${@:-}"; }
  ;;
3) # posh 用（バグ対応版）
  puts() {
    if [ $# -eq 1 ] && [ "$1" = "-n" ]; then
      builtin echo -n -
      builtin echo -n n
      return 0
    fi
    IFS=" $IFS"
    set -- "${*:-}\\" ""
    IFS=${IFS#?}
    while [ "$1" ]; do set -- "${1#*\\\\}" "$2${2:+\\\\}${1%%\\\\*}"; done
    builtin echo -n "$2"
  }
  putsn() {
    [ $# -gt 0 ] && puts "$@"
    builtin echo
  }
  ;;
4) # posh用
  puts() {
    if [ $# -eq 1 ] && [ "$1" = "-n" ]; then
      builtin echo -n -
      builtin echo -n n
      return 0
    fi
    IFS=" $IFS"
    set -- "${*:-}\\" ""
    IFS=${IFS#?}
    while [ "$1" ]; do set -- "${1#*\\}" "$2${2:+\\\\}${1%%\\*}"; done
    builtin echo -n "$2"
  }
  putsn() {
    [ $# -gt 0 ] && puts "$@"
    builtin echo
  }
  ;;
9) # 未知のシェルのためのフォールバック
  puts() {
    # shellcheck disable=SC2031
    PATH="${PATH:-}:/usr/bin:/bin"
    IFS=" $IFS"
    printf '%s' "$*"
    IFS=${IFS#?}
    PATH=${PATH%:/usr/bin:/bin}
  }
  putsn() {
    PATH="${PATH:-}:/usr/bin:/bin"
    IFS=" $IFS"
    printf '%s\n' "$*"
    IFS=${IFS#?}
    PATH=${PATH%:/usr/bin:/bin}
  }
  ;;
esac

echo() {
  if [ "${1:-}" = "-n" ] && shift; then
    puts "${@:-}"
  else
    putsn "${@:-}"
  fi
}

recho() {
  ESC=$(printf '\033') TAB=$(printf '\011')
  putsn "${ESC}[31m
========= ACSL: ==========
${@:-}
==========================
${TAB}${ESC}[m"
}
gecho() {
  ESC=$(printf '\033') TAB=$(printf '\011')
  putsn "${ESC}[32m
========= ACSL: ==========
${@:-}
==========================
${TAB}${ESC}[m"
}
becho() {
  ESC=$(printf '\033') TAB=$(printf '\011')
  putsn "${ESC}[34m
========= ACSL: ==========
${@:-}
==========================
${TAB}${ESC}[m"
}
